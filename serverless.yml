service: serverless-twitter-proxy-app
provider:
  name: aws
  runtime: rust
  memorySize: 128
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Resource:
        - "arn:aws:dynamodb:ap-northeast-1:*:table/TwitterProxyVideoInfoCache"
        - "arn:aws:dynamodb:ap-northeast-1:*:table/TwitterProxyAccessCount"

package:
  individually: true

plugins:
  - serverless-rust
  - serverless-s3-sync

functions:
  resolve-url:
    handler: serverless-twitter-proxy-app.resolve-url
    events:
      - http:
          path: /api/lookup
          method: POST
    environment:
      CONSUMER_KEY: ${file(./.env.yml):CONSUMER_KEY}
      CONSUMER_SECRET: ${file(./.env.yml):CONSUMER_SECRET}
      ACCESS_TOKEN: ${file(./.env.yml):ACCESS_TOKEN}
      ACCESS_SECRET: ${file(./.env.yml):ACCESS_SECRET}

resources:
  Resources:
    TwitterProxyVideoInfoCache:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TwitterProxyVideoInfoCache
        AttributeDefinitions:
          - AttributeName: StatusId
            AttributeType: S
        KeySchema:
          - AttributeName: StatusId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TwitterProxyAccessCount:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TwitterProxyAccessCount
        AttributeDefinitions:
          - AttributeName: StatusId
            AttributeType: S
          - AttributeName: Date
            AttributeType: S
        KeySchema:
          - AttributeName: StatusId
            KeyType: HASH
          - AttributeName: Date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    StaticWebSite:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.webSiteName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticWebSitePolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticWebSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: ["", ["arn:aws:s3:::",{"Ref": "StaticWebSite"},"/*"]]
    ProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi # default Rest API logical ID
            - RootResourceId
        PathPart: "{proxy+}"
        RestApiId:
          Ref: ApiGatewayRestApi
    ProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        ResourceId:
          Ref: ProxyResource
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: GET
        RequestParameters:
          method.request.path.proxy: false
        MethodResponses:
          - StatusCode: 200
        Integration:
          IntegrationHttpMethod: GET
          Type: HTTP_PROXY
          Uri: http://douga-t.com.s3-website-ap-northeast-1.amazonaws.com/{proxy}
          RequestParameters:
            integration.request.path.proxy: method.request.path.proxy
          IntegrationResponses:
            - StatusCode: 200
    RootProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi # default Rest API logical ID
            - RootResourceId
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: GET
#        RequestParameters:
#          method.request.path.proxy: false
        MethodResponses:
          - StatusCode: 200
        Integration:
          IntegrationHttpMethod: GET
          Type: HTTP_PROXY
          Uri: http://douga-t.com.s3-website-ap-northeast-1.amazonaws.com/
#          RequestParameters:
#            integration.request.path.proxy: method.request.path.proxy
          IntegrationResponses:
            - StatusCode: 200


custom:

  # this section customizes of the default
  # serverless-rust plugin settings
  rust:
    # custom docker tag
    dockerTag: '1.51'
    #  custom docker image
    dockerImage: 'softprops/lambda-rust'
  webSiteName: douga-t.com
  s3Sync:
    - bucketName: ${self:custom.webSiteName}
      localDir: frontend/build